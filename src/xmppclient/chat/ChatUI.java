/*
 * ChatUI.java
 *
 * Created on 14 April 2008, 23:40
 */
package xmppclient.chat;

import xmppclient.*;
import org.jivesoftware.smack.Chat;
import org.jivesoftware.smack.ChatManagerListener;
import org.jivesoftware.smack.MessageListener;
import org.jivesoftware.smack.packet.Message;
import org.jivesoftware.smack.util.StringUtils;

/**
 * Controls one-to-one conversations by adding and removing conversation tabs
 * where necessary.
 * @author  Lee Boynton (323326)
 */
public class ChatUI extends javax.swing.JFrame implements MessageListener, ChatManagerListener
{
    /** Creates new form ChatUI */
    public ChatUI()
    {
        initComponents();
    }

    /**
     * Adds a conversation tab if the tab isn't already open
     * @param chat The chat to add
     */
    public void addChat(Chat chat)
    {
        if (getTabIndex(chat) == -1)
        {
            chat.addMessageListener(this);
            tabs.addTab(Utils.getNickname(chat.getParticipant()), 
                    Utils.getUserIcon(MainUI.connection.getRoster().getPresence(chat.getParticipant())),
                    new ChatPanel(chat, this));
        }
    }

    /**
     * Gets the tab index of the given chat
     * @param chat The chat
     * @return The tab index of the chat
     */
    public int getTabIndex(Chat chat)
    {
        for (int i = 0; i < tabs.getTabCount(); i++)
        {
            ChatPanel tab = (ChatPanel) tabs.getComponentAt(i);

            // return the tab that contains the JID without resource
            if (StringUtils.parseBareAddress(tab.getChat().getParticipant()).equals(StringUtils.parseBareAddress(chat.getParticipant())))
            {
                return i;
            }
        }

        // return -1 if tab is not present
        return -1;
    }

    /**
     * Gets the conversation JPanel of the given chat
     * @param chat The chat
     * @return The conversation JPanel
     */
    public ChatPanel getChat(Chat chat)
    {
        return (ChatPanel) tabs.getComponentAt(getTabIndex(chat));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Chat");
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(350, 400));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabs, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        ChatPanel chatPanel = (ChatPanel) tabs.getSelectedComponent();
        
        tabs.remove(chatPanel);

        if (tabs.getTabCount() == 0)
        {
            setVisible(false);
        }
        
        chatPanel.saveChat();
    }//GEN-LAST:event_formWindowClosing
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane tabs;
    // End of variables declaration//GEN-END:variables

    /**
     * This method is triggered every time a chat is created. A message listener
     * is added to the chat. A chat panel is only added to the tabs if the chat 
     * was created locally. The #processMessage(Chat chat, Message message) method
     * displays the tab if the chat participant sends a message.
     * @param chat
     * @param createdLocally
     */
    @Override
    public void chatCreated(Chat chat, boolean createdLocally)
    {
        // if created locally show the tab
        if (createdLocally)
        {
            // add the chat
            addChat(chat);

            // show the window, if not already visible
            setVisible(true);
        }
        else
        {
            // wait for a message to be sent before showing the tab
            chat.addMessageListener(this);
        }
    }

    /**
     * This method is fired every time a message is sent to the local user. If
     * the message is a chat message, it will add the chat as a tab and add the
     * message that was sent to the user.
     * @param chat The chat the message is part of
     * @param message The message sent to the user
     */
    @Override
    public void processMessage(Chat chat, Message message)
    {
        if (message.getType() == Message.Type.chat)
        {
            // a message has been sent, show the window
            setVisible(true);
            addChat(chat);
            getChat(chat).addMessage(Utils.getAvatar(chat.getParticipant(), 50), Utils.getNickname(chat.getParticipant()), message);
        }
    }
}
