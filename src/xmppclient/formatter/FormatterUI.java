/*
 * FormatterUI.java
 *
 * Created on 06 May 2008, 13:14
 */

package xmppclient.formatter;

import java.awt.Color;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import javax.swing.JColorChooser;
import javax.swing.JFrame;

/**
 * A dialog allowing the user to create a new #Format, which includes a font
 * and colour. The user can select the font type, font size, bold, italic and
 * colour in the user interface.
 * @author  Lee Boynton (323326)
 */
public class FormatterUI extends javax.swing.JDialog 
{
    private GraphicsEnvironment gEnv = GraphicsEnvironment.getLocalGraphicsEnvironment();
    private final String[] sizes = { "8", "10", "11", "12", "14", "16", "18",
      "20", "24", "30", "36", "40", "48", "60", "72" };
    private Font font;
    private Font defaultFont;
    private Color colour;
    private Color defaultColour;
    
    /** 
     * Creates a new hidden FormatterUI dialog
     * @param owner The owner of the dialog, or null
     */
    public FormatterUI(JFrame owner) 
    {
        super(owner, "Format text", true);
        font = new Font(null, 12, Font.PLAIN);
        colour = Color.black;
        initComponents();
        initSelection();
        previewText();
    }
    
    /**
     * Creates a new hidden FormatterUI dialog
     * @param owner The owner of the dialog, or null
     * @param defaultFont The default starting font
     * @param defaultColour The default starting colour
     */
    public FormatterUI(JFrame owner, Font defaultFont, Color defaultColour)
    {
        super(owner, "Format text", true);
        this.defaultFont = defaultFont;
        this.defaultColour = defaultColour;
        this.colour = defaultColour;
        this.font = defaultFont;
        initComponents();
        initSelection();
        previewText();
    }
    
    private void initSelection()
    {
        fontList.setSelectedValue(defaultFont.getFamily(), true);
        sizeList.setSelectedValue(String.valueOf(defaultFont.getSize()), true);
        boldCheckBox.setSelected(defaultFont.isBold());
        italicCheckBox.setSelected(defaultFont.isItalic());
    }
    
    /**
     * Shows the modal formatting dialog.
     * @return A Format object containing the font and colour.
     * If the user selected save the new font and colour is returned,
     * else the default font and colour are returned
     */
    public Format showDialog()
    {
        setVisible(true);
        return new Format(font, colour);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fontListScrollPane = new javax.swing.JScrollPane();
        fontList = new javax.swing.JList(gEnv.getAvailableFontFamilyNames());
        sizeListScrollPane = new javax.swing.JScrollPane();
        sizeList = new javax.swing.JList(sizes);
        previewTextLabel = new javax.swing.JLabel();
        boldCheckBox = new javax.swing.JCheckBox();
        italicCheckBox = new javax.swing.JCheckBox();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        colourButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocationByPlatform(true);

        fontListScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Font", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        fontList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fontListValueChanged(evt);
            }
        });
        fontListScrollPane.setViewportView(fontList);

        sizeListScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Size", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        sizeList.setSelectedIndex(0);
        sizeList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                sizeListValueChanged(evt);
            }
        });
        sizeListScrollPane.setViewportView(sizeList);

        previewTextLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        previewTextLabel.setText("Preview text");
        previewTextLabel.setToolTipText("This is how your messages will appear");
        previewTextLabel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Preview", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        boldCheckBox.setText("Bold");
        boldCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boldCheckBoxActionPerformed(evt);
            }
        });

        italicCheckBox.setText("Italic");
        italicCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                italicCheckBoxActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        colourButton.setText("Colour...");
        colourButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colourButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(previewTextLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(fontListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sizeListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(boldCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(italicCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 239, Short.MAX_VALUE)
                        .addComponent(colourButton))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 286, Short.MAX_VALUE)
                        .addComponent(saveButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fontListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sizeListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(boldCheckBox)
                        .addComponent(italicCheckBox))
                    .addComponent(colourButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(previewTextLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(saveButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {fontListScrollPane, sizeListScrollPane});

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void fontListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fontListValueChanged
    previewText();
}//GEN-LAST:event_fontListValueChanged

private void boldCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boldCheckBoxActionPerformed
    previewText();
}//GEN-LAST:event_boldCheckBoxActionPerformed

private void sizeListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_sizeListValueChanged
    previewText();
}//GEN-LAST:event_sizeListValueChanged

private void italicCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_italicCheckBoxActionPerformed
    previewText();
}//GEN-LAST:event_italicCheckBoxActionPerformed

private void colourButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colourButtonActionPerformed
    this.colour = JColorChooser.showDialog(this, "Select text colour", Color.black);
    previewText();
}//GEN-LAST:event_colourButtonActionPerformed

private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
    font = defaultFont;
    colour = defaultColour;
    dispose();
}//GEN-LAST:event_cancelButtonActionPerformed

private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
    dispose();
}//GEN-LAST:event_saveButtonActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FormatterUI(null).setVisible(true);
            }
        });
    }
    
    /**
     * Called every time the preview text needs updating
     */
    private void previewText()
    {
        String fontname = (String) fontList.getSelectedValue();
        int style = Font.PLAIN;
        
        if(boldCheckBox.isSelected()) style = Font.BOLD;
        if(italicCheckBox.isSelected()) style |= Font.ITALIC;
        
        int size = Integer.valueOf((String)sizeList.getSelectedValue());
        
        Font newFont = new Font(fontname, style, size);
        previewTextLabel.setFont(newFont);
        previewTextLabel.setForeground(colour);
        font = newFont;
        pack();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox boldCheckBox;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton colourButton;
    private javax.swing.JList fontList;
    private javax.swing.JScrollPane fontListScrollPane;
    private javax.swing.JCheckBox italicCheckBox;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel previewTextLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JList sizeList;
    private javax.swing.JScrollPane sizeListScrollPane;
    // End of variables declaration//GEN-END:variables
}
