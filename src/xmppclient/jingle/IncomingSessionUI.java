/*
 * IncomingSessionUI.java
 *
 * Created on 26 May 2008, 21:34
 */
package xmppclient.jingle;

import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javazoom.jlgui.basicplayer.BasicController;
import javazoom.jlgui.basicplayer.BasicPlayer;
import javazoom.jlgui.basicplayer.BasicPlayerEvent;
import javazoom.jlgui.basicplayer.BasicPlayerException;
import javazoom.jlgui.basicplayer.BasicPlayerListener;

/**
 * Not used anymore.
 * @author  Lee Boynton (323326)
 */
public class IncomingSessionUI extends javax.swing.JDialog implements BasicPlayerListener
{
    private JingleSessionRequest request;
    private IncomingSession session;

    /** Creates new form IncomingSessionUI
     * @param parent
     * @param modal
     * @param request 
     */
    public IncomingSessionUI(java.awt.Frame parent, boolean modal, JingleSessionRequest request)
    {
        super(parent, modal);
        this.request = request;
        this.session = request.accept();
        session.getPlayer().addBasicPlayerListener(this);
        initComponents();
        setLocationRelativeTo(parent);

        SwingWorker sw = new SwingWorker()
        {
            @Override
            protected Object doInBackground() throws Exception
            {
                while (true)
                {
                    statusLabel.setText(session.getStatus());
                    if (session.isConnected())
                    {
                        playButton.setEnabled(true);
                    }
                    if (session.isComplete())
                    {
                        break;
                    }
                    Thread.sleep(1000);
                }
                return null;
            }
        };
        sw.execute();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        playButton = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        fileLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        playButton.setText("Pause");
        playButton.setEnabled(false);
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        statusLabel.setText("Status");

        fileLabel.setText("File");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fileLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(playButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusLabel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fileLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playButton)
                    .addComponent(statusLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
    try
    {
        if (session.getPlayer().getStatus() == BasicPlayer.PLAYING)
        {
            session.getControl().pause();
        }
        else if (session.getPlayer().getStatus() == BasicPlayer.PAUSED)
        {
            session.getControl().resume();
        }
    }
    catch (BasicPlayerException ex)
    {
        Logger.getLogger(IncomingSessionUI.class.getName()).log(Level.SEVERE, null, ex);
    }
}//GEN-LAST:event_playButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt)
    {//GEN-FIRST:event_formWindowClosed
        
    }//GEN-LAST:event_formWindowClosed

private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

    if (JOptionPane.showConfirmDialog(this,
            "Terminate stream?",
            "Terminate Stream",
            JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
    {
        try
        {
            session.getControl().stop();
            session.sendTerminate();
        }
        catch (BasicPlayerException ex)
        {
            Logger.getLogger(IncomingSessionUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        dispose();
    }
}//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel fileLabel;
    private javax.swing.JButton playButton;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void opened(Object stream, Map properties)
    {
        System.out.println("opened : " + properties.toString());
    }

    @Override
    public void progress(int bytesread, long microseconds, byte[] pcmdata, Map properties)
    {
        System.out.println("progress : " + properties.toString());
    }

    @Override
    public void stateUpdated(BasicPlayerEvent event)
    {
        System.out.println("stateUpdated : " + event.toString());
        if (event.getCode() == BasicPlayerEvent.RESUMED)
        {
            playButton.setText("Pause");
        }
        if (event.getCode() == BasicPlayerEvent.PAUSED)
        {
            playButton.setText("Play");
        }
    }

    @Override
    public void setController(BasicController controller)
    {
        System.out.println("setController : " + controller);
    }
}
