/*
 * PrivacyUI.java
 *
 * Created on 24 May 2008, 12:56
 */
package xmppclient;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.jivesoftware.smack.PrivacyList;
import org.jivesoftware.smack.PrivacyListManager;
import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.XMPPException;

/**
 * Incomplete JFrame for managing privacy lists. This frame should allow users
 * to view their privacy lists, add, remove or modify them, and set a list
 * as the active list.
 * See http://www.xmpp.org/extensions/xep-0016.html for details.
 * @author  Lee Boynton (323326)
 */
public class PrivacyUI extends javax.swing.JFrame
{
    private XMPPConnection connection;
    private PrivacyListManager manager;

    /** 
     * Initialises the user interface
     * @param connection The XMPP connection to use
     */
    public PrivacyUI(XMPPConnection connection)
    {
        this.connection = connection;
        manager = PrivacyListManager.getInstanceFor(connection);
        initComponents();
    }

    private void updateList()
    {
        DefaultListModel model = new DefaultListModel();
        
        try
        {
            for (PrivacyList list : manager.getPrivacyLists())
            {
                model.addElement(list);
            }
        }
        catch (XMPPException ex)
        {
            model.addElement(ex.getMessage());
        }
        
        privacyList.setModel(model);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        privacyListScrollPane = new javax.swing.JScrollPane();
        privacyList = new javax.swing.JList();
        newButtton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        activeButton = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        privacyListScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Privacy Lists", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        updateList();
        privacyList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        privacyList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                privacyListValueChanged(evt);
            }
        });
        privacyListScrollPane.setViewportView(privacyList);

        newButtton.setText("New");
        newButtton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButttonActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.setEnabled(false);

        removeButton.setText("Remove");
        removeButton.setEnabled(false);
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        activeButton.setText("Set active");
        activeButton.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(privacyListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(activeButton)
                    .addComponent(newButtton)
                    .addComponent(editButton)
                    .addComponent(removeButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {activeButton, editButton, newButtton, removeButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(privacyListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(activeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newButtton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void newButttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButttonActionPerformed

    new PrivacyListUI(this, connection).setVisible(true);
    /*List<PrivacyItem> items = new ArrayList<PrivacyItem>();
    PrivacyItem item = new PrivacyItem("jid", true, 1);
    item.setValue("test@192.168.0.8");
    items.add(item);
    try
    {
        manager.createPrivacyList("new list", items);
    }
    catch (XMPPException ex)
    {
        Logger.getLogger(PrivacyUI.class.getName()).log(Level.SEVERE, null, ex);
    }*/
    
    updateList();
}//GEN-LAST:event_newButttonActionPerformed

private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
    try
    {
        PrivacyList list = (PrivacyList) privacyList.getSelectedValue();//GEN-LAST:event_removeButtonActionPerformed
        manager.deletePrivacyList(list.toString());
    }
    catch (XMPPException ex)
    {
        JOptionPane.showMessageDialog(this,
                "Could not remove the specified list:\n" +
                ex.getMessage(),
                "Error Removing List",
                JOptionPane.ERROR_MESSAGE);
    }
    
    updateList();
    privacyList.requestFocus();
}

private void privacyListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_privacyListValueChanged
    
    if(privacyList.getValueIsAdjusting()) return;
    if(!(privacyList.getSelectedValue() instanceof PrivacyList)) return;
    
    PrivacyList list = (PrivacyList) privacyList.getSelectedValue();
    
    if(!list.isActiveList())
    {
        activeButton.setEnabled(true);
    }
    
    removeButton.setEnabled(true);
    editButton.setEnabled(true);
}//GEN-LAST:event_privacyListValueChanged

    /**
     * Used for testing purposes
     * @param args Not used
     * @throws XMPPException Throws an XMPP exception if the server is unreachable
     * or if the username and password is incorrect
     */
    public static void main(String args[]) throws XMPPException
    {
        final XMPPConnection c = new XMPPConnection("192.168.0.8");
        c.connect();
        c.login("lee", "password");

        java.awt.EventQueue.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                new PrivacyUI(c).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton activeButton;
    private javax.swing.JButton editButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton newButtton;
    private javax.swing.JList privacyList;
    private javax.swing.JScrollPane privacyListScrollPane;
    private javax.swing.JButton removeButton;
    // End of variables declaration//GEN-END:variables
}
